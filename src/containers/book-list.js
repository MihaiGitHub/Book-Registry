import React, { Component } from 'react';
import { connect } from 'react-redux';
import { selectBook } from '../actions/index';
// A function to make sure that the action generated by the action creator ends up flowing through all reducers in app
import { bindActionCreators } from 'redux';

class BookList extends Component {
    renderList(){
        return this.props.books.map((book) => {
            return ( // Create onClick handler and pass in book
                <li 
                key={book.title} 
                onClick={() => this.props.selectBook(book)}
                className="list-group-item">
                {book.title}
                </li>
            );
        });
    }

    render(){
        return (
            <ul className="list-group col-sm-4">
                {this.renderList()}
            </ul>
        )
    }
}

// It takes in the entire application state; If state changes then entire component will rerender
function mapStateToProps(state) {
    // Whatever is returned will show up as props
    // Inside of BookList
    return {
        // Everytime app state changes the object in state function will be assigned as props in component
        books: state.books
    };
}

// Anything returned from this function will end up as props on the BookList container
function mapDispatchToProps(dispatch) {
    // Whenever selectBook is called, the result should be passed to all reducers using dispatch
    return bindActionCreators({ selectBook: selectBook }, dispatch);
}

// Promote BookList from a component to a container
// BookList needs to know about new dispatch method: selectBook and make it available as a prop
export default connect(mapStateToProps, mapDispatchToProps)(BookList);